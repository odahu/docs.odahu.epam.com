
###############################
Security (new)
###############################

**************************
Goals
**************************

Prime goals of ODAHU Security system is provide
`authentication <https://en.wikipedia.org/wiki/Authentication>`_ and
`authorization <https://en.wikipedia.org/wiki/Authorization>`_
of requests to all system's components.

****************
Component roles
****************

.. _idP:
Identity Provider (idP)
  Component that provides information about entity (user or service).

.. _PEP:
Policy Enforcement Point (PEP)
  Component located in the middle of party who makes request and protected resource.
  PEP ensures that all requests will be validated by security policy before sent to upstream API.

.. _PDP:
Policy Decision Point (PDP)
  Component that makes decision whether request (action in the system) should be permitted or not.


****************
Components
****************

What exactly components solve different problems in cluster

* Any OpenID connect compatible service as an `my-reference-label`_
* `Envoy proxy`_ with `Envoy external authorization`_ as a PEP
* OpenPolicyAgent_ as a PDP


*********************************
ODAHU API HTTP Request Lifecycle
*********************************

HTTP request lifecycle to ODAHU API is shown below.
Such overview helps to understand key phases and components of ODAHU Security system.

.. image:: img/odahu_security.png


1. HTTP Request from outside the cluster perimeter.

   1. User make request that is intercepted by OAuth2Proxy.
   2. OAuth2Proxy looks up cookies that contain JWT Token issued by Identity Provider.
      And if there are no such cookies it redirects user to Identity provider Auth url.
      After successful login OAuth2Proxy set issued token to cookies and send request to upstream.
      Before proxying requests to upstream OAuth2Proxy add HTTP Authorization header by setting it from the cookie.
   3. OAuth2Proxy send request to Up  stream.

2. HTTP Request from inside the cluster perimeter. Such requests usually made by background processes inside cluster
   on behalf of service accounts.

   1. Service should previously authenticate in idP using OpenID protocol.
      The most suitable way to authenticate services is `OAuth2 Client Credentials Grant`_
   2. Service makes request to API using issued JWT token as HTTP header

3. Envoy proxy that is configured as sidecar container by Istio Pilot for those ODAHU components that must be
   protected ensures that security policy allows to make this request to ODAHU API

  1. Envoy verifies JWT token using filter
  2. Envoy makes query to OpenPolicyAgent_ to check permissions for request

4. If request if permitted by OpenPolicyAgent_ it is sent to upstream (ODAHU API)



***********************
ODAHU Built-in Roles
***********************

Describe ODAHU roles


***********************
Customize RBAC
***********************

Info about how to edit odahu policies to manage RBAC

***********************
Customize ABAC
***********************

Info about how to edit odahu policies to manage ABAC


****************************
Example: Configure Keycloak
****************************

#. How to assign role to existing user?
#. How to assign role to all users automatically?
#. How to create service account with appropriate role?

.. _`Envoy proxy`: https://www.envoyproxy.io/
.. _`Envoy external authorization`: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/ext_authz_filter#arch-overview-ext-authz
.. _OpenPolicyAgent: https://www.openpolicyagent.org/
.. _OAuth2Proxy: https://pusher.github.io/oauth2_proxy/
.. _`OAuth2 Client Credentials Grant`: https://tools.ietf.org/html/rfc6749#section-4.4